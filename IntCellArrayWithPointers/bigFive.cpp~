#include <iostream>
#include<vector>
using namespace std;

/**
 * Figure 1.18: Implements the big five.
 * Now, (unlike with original version) when we copy the first vector 
 * and modify it (or the original), the other will not 
 * be changed -- they're independent.
*/
 
class IntCell
{
  public:
    explicit IntCell( int initialValue = 0 )
      { storedValue = new int{ initialValue }; }
    
    ~IntCell( )
      { delete storedValue; }

    IntCell( const IntCell & rhs )
      { storedValue = new int{ *rhs.storedValue }; }

    IntCell( IntCell && rhs ) : storedValue{ rhs.storedValue }
      { rhs.storedValue = nullptr; }
    
    IntCell & operator= ( const IntCell & rhs )
    {
        if( this != & rhs )
            *storedValue = *rhs.storedValue; 
        return *this;
    }
    
    IntCell & operator= ( IntCell && rhs )
    {
        std::swap( storedValue, rhs.storedValue );
        return *this;
    }
    int read( ) const
      { return *storedValue; }
    void write( int x )
      { *storedValue = x; }
     
    //overloading the << to print IntCells
	 friend ostream& operator<<(ostream& os, const IntCell& intCell)
		{
			 os << intCell.read();
			 return os;
		}
    
  private:
    int *storedValue;
};


int f( )
{
	 IntCell x {1};
	 IntCell y {2};
	 IntCell z {3};
	 
    vector<IntCell> a { x,y,z };
    vector<IntCell> b (a.begin(),a.end());
    IntCell * c[3];
    
    a[0].write(9); // this demonstrates the shallow copy problem. changing the values of a changes the values of b
    
    cout << "first vector\n";
    for(int i = 0; i < 3; i++){
    	 cout << a[i] << endl;
 	 }
 	 
 	 cout << "\nsecond vector\n";
  	 for(int i = 0; i < 3; i++){
  	  	 cout << b[i].read( ) << endl;
  	 }

	 // c[] is an array of pointers to the addresses of the values in a[]
    for(int i =0; i < 3; i++){
    	c[i] = &a[i];
    }
    
    // it makes sense that c[0] would change with a[0]'s change-- its a pointer.
  	 cout << "\nthird vector\n";
  	 for(int i = 0; i < 3; i++){
  	  	 cout << c[i]->read( ) << endl;
  	 }
  	 
    return 0;
    
}


int main( )
{
    f( );
    
    return 0;
}
